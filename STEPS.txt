Redux :
1- Une todo-list (voir https://redux.js.org/basics/example-todo-list)
2- puis adapter pour réaliser un blog

1- todolist
a- $ npm install --save react-redux redux
b- dans src/, créer actions/ components/ containers/ reducers/
distinction entre composants de présentation et containers (https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0)

Les composants de présentation:
- concernent la façon dont les choses ont l'air.
- puvent contenir à la fois des composants de présentation et des composants de conteneur **, et possède habituellement des balises DOM et des styles propres.
- Permettent souvent le confinement via this.props.children
- Aucune dépendance vis-à-vis du reste de l'application, telle que les actions Flux/Redux ou les magasins/Store.
- Ne savent pas comment les données sont chargées ou mutées.
- Peuvent recevoir des données et des rappels exclusivement via les props.
- Ont rarement leur propre état/state (quand ils le font, c'est l'état de l'interface utilisateur plutôt que des données).
- Sont écrits en tant que composants fonctionnels sauf s'ils nécessitent un état, des cycle de vie ou des optimisations de performances.
Exemples: Page, Sidebar, Story, UserInfo, List.

Les composants de conteneur:

- Concernent par la façon dont les choses fonctionnent.
- Peuvent contenir à la fois des composants de présentation et de conteneurs à l'intérieur, mais n'ont généralement pas de balise DOM propre à l'exception de certaines divs enveloppantes, et n'ont jamais de styles.
- Fournissent les données et le comportement aux composants de présentation ou autres composants de conteneur.
- Appellent les actions Flux/Redux et fournissent ceux-ci en callback aux composants de présentation.
- Sont souvent dynamiques, car ils ont tendance à servir de sources de données.
- Sont généralement générés en utilisant des composants d'ordre supérieur tels que connect() de React Redux, createContainer() de Relay

Exemples: UserPage, FollowersSidebar, StoryContainer, FollowedUserList.
Dans des dossiers différents pour faire cette distinction claire.

c- index.js : ajouter le store, le Provider et le rootReducer
d- les actions/index.js
e- les reducers/
   - index.js
   - todos.js
   - visibilityFilter.js
f- les composants présentationnels
components/Todo.js
components/TodoList.js
components/Link.js
components/Footer.js
components/App.js


g- les composants containers
containers/VisibleTodoList.js
containers/FilterLink.js
autres :
containers/AddTodo.js

TODO : expliquer mapStateToProps et mapDispatchToProps et connect() par défaut
voir https://www.sohamkamani.com/blog/2017/03/31/react-redux-connect-explained/
connect()(AddTodo) will pass dispatch as a prop to AddTodo component, which is still useful even without state or predefined actions.

2- Un blog hyper minimal à partir de TodoList...
f- les composants présentationnels
components/Post.js
components/PostList.js
components/App.js


g- les composants containers
containers/VisiblePostList.js
autres :
containers/AddPost.js